import os
from dotenv import load_dotenv
import google.generativeai as genai
import streamlit as st
import pandas as pd
import torch
import clip
from PIL import Image
import numpy as np
import requests
from io import BytesIO

load_dotenv()
google_api_key = os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=google_api_key)

# --- T·∫£i d·ªØ li·ªáu phim ---
@st.cache_data
def load_movie_data():
    df = pd.read_csv("imdb_top_1000.csv")
    return df[["Series_Title", "Poster_Link", "Genre", "Runtime", "IMDB_Rating"]]

df = load_movie_data()

# --- T·∫£i model CLIP ---
@st.cache_resource
def load_clip():
    return clip.load("ViT-B/32", device="cpu")

model, preprocess = load_clip()


st.title("üé¨ CINEPHILE ‚Äì Chatbot G·ª£i √ù Phim")
st.header("T∆∞ v·∫•n phim b·∫±ng vƒÉn b·∫£n")
model_chat = genai.GenerativeModel(
    "gemini-2.0-flash-lite",
    system_instruction="""
                    B·∫°n l√† m·ªôt t∆∞ v·∫•n phim chuy√™n nghi·ªáp, h√£y g·ª£i √Ω c√°c b·ªô phim ph√π h·ª£p v·ªõi y√™u c·∫ßu ng∆∞·ªùi d√πng, bao g·ªìm t√™n phim, th·ªÉ lo·∫°i, ƒë·ªô d√†i v√† ƒëi·ªÉm IMDb.
                    1. N·∫øu c√≥ c√°c th√¥ng tin
"""
)

input_text = st.text_input("Nh·∫≠p n·ªôi dung c·ªßa b·∫°n t·∫°i ƒë√¢y (v√≠ d·ª•: 'T√¥i th√≠ch phim ho·∫°t h√¨nh kho·∫£ng 90 ph√∫t')", key=input)
submit = st.button("G·ª≠i")

response = None
if input_text and submit:
    response = model_chat.generate_content(input_text)

mess = st.empty()

if response:
    mess.markdown(response.text)

# L·ªãch s·ª≠ Chatbot
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Giao di·ªán n√∫t
if st.button("Xo√° l·ªãch s·ª≠"):
    st.session_state.chat_history = []  # Xo√° d·ªØ li·ªáu trong session
    st.success("ƒê√£ xo√° l·ªãch s·ª≠!")

for role, msg in st.session_state.chat_history:
    st.markdown(f"**{role}**: {msg}")

if submit:
    response = model_chat.generate_content(input_text)
    st.session_state.chat_history.append(("üßë", input_text))
    st.session_state.chat_history.append(("ü§ñ", response.text))


# --- PH·∫¶N 2: G·ª£i √Ω t·ª´ ·∫£nh poster ---
st.header("T√¨m phim t∆∞∆°ng t·ª± t·ª´ poster")

uploaded_file = st.file_uploader("T·∫£i ·∫£nh poster phim b·∫°n th√≠ch l√™n", type=["jpg", "png", "jpeg"])
if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="Poster b·∫°n ƒë√£ t·∫£i", use_column_width=True)

    # Vector h√≥a ·∫£nh
    image_input = preprocess(image).unsqueeze(0)
    with torch.no_grad():
        image_vec = model[0].encode_image(image_input).numpy()

    # So s√°nh v·ªõi vector ƒë√£ m√£ h√≥a
    try:
        vectors = np.load("poster_vectors.npy")
    except:
        st.error("Thi·∫øu file poster_vectors.npy. H√£y ch·∫°y generate_vectors.py tr∆∞·ªõc.")
        st.stop()

    similarities = vectors @ image_vec.T
    top_indices = similarities.flatten().argsort()[-5:][::-1]

    st.subheader("G·ª£i √Ω phim t∆∞∆°ng t·ª±:")
    for idx in top_indices:
        row = df.iloc[idx]
        st.markdown(f"** {row['Series_Title']}**  ")
        st.image(row["Poster_Link"], width=200)
        st.markdown(f"- **Th·ªÉ lo·∫°i:** {row['Genre']}")
        st.markdown(f"- **Th·ªùi l∆∞·ª£ng:** {row['Runtime']}")
        st.markdown(f"- **IMDb:** ‚≠ê {row['IMDB_Rating']}")
        st.markdown("---")